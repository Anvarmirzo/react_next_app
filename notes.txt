1. Модуль classnames:
className={cn(styles.button, {
				[styles.primary]: appearance == 'primary',
				[styles.ghost]: appearance == 'ghost',
			})}
Применится сначала button, потом в зависимости от условия либо primary, либо ghost

2. Передача API элементов:
interface ButtonProps
	extends DetailedHTMLProps<
		ButtonHTMLAttributes<HTMLButtonElement>,
		HTMLButtonElement
	>
	
3. Hooks
 Основные:
useState - позволяет работать с состоянием компонента
useEffect - позволяет подписываться на изменения жизненного цикла компонентов (props и тд)
useContext - позволяет использовать глобальный контекст и записывать это значение или читать 
 Дополнительные:
useReducer - похож на useState, позволяет больше использовать Redux state вместо полной его замены
useCallBack - позволяет выполнить определенную функцию при изменении входящих параметров
useMemo - запоминает для нас результат этой функции init будет требовать перерендедера при изменении входящих параметров  
useRef - отвечает за получении ссылки с нашего компонента на ДОМ-дереве
useLayoutEffect - триггерится после построения ДОМ-дерева, синхронный эффект не рекомендуется к использованию, лучше использовать useEffect, так как может затормозить анимации и тп
useImperativeHandle - позволяет прокидывать на родительский компонент рефы (редко используется)
useDebugValue - позволяет в devtools отображать какие то значения

4.Правила использования Hooks:
- всегда должны вызываться из самих функциональных компонентов или из пользовательских хуков
- никогда не вызывать хуки не на верхних уровнях, не ставьте если при котором будет вызываться хук, лучше поставить условие внутри хука


Примеры:
	const [counter, setCounter] = useState<number>(0);
	useEffect(() => {
		if (counter) {
			console.log('Counter ' + counter);
		}
	});
	<Htag>{counter}</Htag>
<Button
				onClick={() => setCounter((x) => x + 1)}
			>
				Кнопка
</Button>